---
title: "Temperaturas y lluvias"
format:
  html:
    theme: darkly
    highlight-style: monokai

---

```{r libraries}
#| include: false
library(readr)
library(tidyverse)
library(lubridate)
library(plotly)
library(patchwork)
```

# Cargar datos de NOAA

 - Perú: todas las estaciones, desde 1947 en adelante

```{r import}
#| echo: false
load("data/per_noaa_1947_2023.RData")
glimpse(per_noaa_1947_2023)
```

# Creación de datasets 

## Datasets a nivel de estación
```{r wrangling_databases}
#| echo: false
daily_data <- per_noaa_1947_2023 |>
    mutate(
        week = week(date), 
        year = year(date))

weekly_averages <- daily_data |>
    group_by(
        station, year, week)  |> 
    summarize(
        city = first(city),
        prcp = mean(prcp, na.rm = TRUE),
        tavg = mean(tavg, na.rm = TRUE), # Chequeado que no hay NAs
        tmax = mean(tmax, na.rm = TRUE),
        tmin = mean(tmin, na.rm = TRUE),
        name = first(name)) |> 
    suppressMessages() |> 
    ungroup()

yearly_averages <- daily_data |> 
    group_by(
        station, year)  |>
    summarize(
        city = first(city),
        prcp = mean(prcp, na.rm = TRUE),
        tavg = mean(tavg, na.rm = TRUE),
        tmax = mean(tmax, na.rm = TRUE),
        tmin = mean(tmin, na.rm = TRUE),
        name = first(name)) |> 
    suppressMessages() |> 
    ungroup()


# Filter missing weeks on yearly averages:

# Create a mapping of stations to cities
station_city_mapping <- daily_data |>
    select(station, city, name) |> 
    distinct()

# Generate a complete set of weeks for each year and station
complete_weeks <- expand.grid(
  year = unique(year(daily_data$date)),
  week = 1:53,  # Assuming up to 53 weeks in a year
  station = unique(daily_data$station)
)

# Merge complete weeks with station-city mapping
daily_data_complete <- complete_weeks  |> 
    left_join(station_city_mapping, by = "station")  |> 
    left_join(daily_data |> select(-city, -name), by = c("station", "year", "week"))

# Proceed with the pipeline

yearly_averages_corrected <- daily_data_complete |> 
    group_by(station, year, week) |> 
    summarize(
        city = first(city),
        name = first(name),
        days_present = sum(!is.na(date)),
        tavg = mean(tavg, na.rm = TRUE),
        .groups = "drop"
        ) |> 
    group_by(station, year) |> 
    summarize(
        city = first(city),
        name = first(name),
        missing_weeks = sum(days_present < 3, na.rm = TRUE),
        tavg = if_else(missing_weeks > 4, NA_real_, mean(tavg, na.rm = TRUE))
        ) |> 
    suppressMessages() |> 
    ungroup()


cat("daily_data:\n")
glimpse(daily_data) 
cat("\n")

cat("weekly_averages:\n")
glimpse(weekly_averages)
cat("\n")

cat("yearly_averages:\n")
glimpse(yearly_averages)
cat("\n")

cat("yearly_averages_corrected:\n")
glimpse(yearly_averages_corrected)
cat("\n")
```

## Datasets a nivel nacional - Agregar estaciones es un mal promedio
```{r wrangling_national}
#| echo: false
daily_data_national <- daily_data |> 
    group_by(date) |>
    summarize(
        prcp = mean(prcp, na.rm = TRUE),
        tavg = mean(tavg, na.rm = TRUE),
        tmax = mean(tmax, na.rm = TRUE),
        tmin = mean(tmin, na.rm = TRUE)
        ) |> suppressMessages() |> 
    ungroup() |> 
    mutate(
        week = week(date), 
        year = year(date))

weekly_averages_national <- daily_data_national |>
    group_by(
        year, week) |> 
    summarize(
        prcp = mean(prcp, na.rm = TRUE),
        tavg = mean(tavg, na.rm = TRUE),
        tmax = mean(tmax, na.rm = TRUE),
        tmin = mean(tmin, na.rm = TRUE)
        ) |> suppressMessages() |> 
    ungroup()

yearly_averages_national <- daily_data_national |>
    group_by(
        year)  |>
    summarize(
        prcp = mean(prcp, na.rm = TRUE),
        tavg = mean(tavg, na.rm = TRUE),
        tmax = mean(tmax, na.rm = TRUE),
        tmin = mean(tmin, na.rm = TRUE),
        ) |> suppressMessages() |> 
    ungroup()

cat("daily_data_national:\n")
glimpse(daily_data_national) 
cat("\n")

cat("weekly_averages_national:\n")
glimpse(weekly_averages_national)
cat("\n")

cat("yearly_averages_national:\n")
glimpse(yearly_averages_national)
cat("\n")
```

## Temperaturas promedio

### Temperatura promedio 1947-2023 - Nacional
```{r temp_promedio}
#| echo: false
# Hallar temperatura promedio 1947-2023
temp_avg_63_23 <-  per_noaa_1947_2023 |> 
    filter(city == "Lima - Callao",
           date > "1962-12-31") |> 
    select(date, tavg) |> 
    group_by(year(date)) %>%
    summarize(tyear = mean(tavg, na.rm = TRUE)) %>%
    pull(tyear) %>%
    mean()
temp_avg_63_23
```

### un poco de data wrangling (quizás lo borramos)
```{r wrangling}
#| echo: false

df <- per_noaa_1947_2023 |> 
    filter(city == "Lima - Callao",
           date > "1962-12-31")  |> 
    select(date, tavg) |> 
    filter(date>"1981-12-31")
df

```

# Promedio por semana y promedio anual
```{r}
#| echo: false
period_mean <- df %>%
  group_by(year(date)) %>%
  summarize(tyear = mean(tavg)) %>%
  pull(tyear) %>%
  mean()

df_week <- df %>%
  mutate(week = week(date), year = year(date)) %>%
  group_by(year, week) %>%
  summarize(tavg_week = mean(tavg)) %>%
  ungroup() %>%
  group_by(year) %>%
  mutate(tyear = mean(tavg_week)) %>%
  ungroup()
df_week
```

# Heatmaps Lima

## 1. Creamos un theme
 
```{r theme_heatmap}
#| echo: false

theme_heatmap <- function() {
    theme_void() +  # Use theme_void() as the base theme
    theme(
        text = element_text(
            colour = "#F9F7F3",
            family = "Sanchez"),
        plot.background = element_rect(
            fill = "#2D2D2D", color = NA),  # #2D2D2D plot background
        panel.background = element_rect(
            fill = "#2D2D2D", color = NA),  # #2D2D2D panel background
        axis.line = element_blank(),
        axis.text = element_text(size = 6), # Remove axis lines
        plot.caption = element_text(
            margin = margin(t = 10, unit = "pt"),
            hjust = 0, vjust = 1, size = 2.75, 
            color = "#F9F7F3", family = "Sanchez"),
        plot.title = element_text(
            size = 11, hjust = 0.5),
        plot.title.position = "plot", 
        plot.subtitle = element_text(
            margin = margin(t = 2.5, b = 7.5, unit = "pt"),
            size = 7, hjust = 0.5),
        axis.text.y = element_blank(),
        axis.text.x = element_text(
            size = 4
        ),
        plot.margin = margin(
            t = 10, r = 10, b = 10, l = 10, unit = "pt"), 
        legend.title = element_text(size = 6),
        legend.text = element_text(size = 4),
        legend.position = c(0.8, -0.1),
        legend.direction = "horizontal",
        panel.spacing.y = unit(2, "lines")
        # legend.spacing.y = unit(15, "pt"),
        )
}
```

## 2. Creamos una función para hacer el heatmap base:
```{r fun_weekly_heatmap, fig.width=6, fig.height=6}
#| echo: false

make_base_weekly_heatmap <- function(weekly_dataset,
                                     medicion,
                                     custom_breaks_years = waiver(),
                                     custom_limits = waiver(),
                                     custom_breaks_fill = waiver(),
                                     custom_labels_fill = waiver(),
                                     color_palette = "RdBu",
                                     fill_direction = 1
                                     ) {
    ggplot(
        weekly_dataset,
        aes(x = year, y = week, fill = {{ medicion }})
        ) +
        geom_tile(colour = "#2D2D2D"  # Use geom_tile() instead of geom_raster() for better control
                  ) + 
        scale_x_continuous(
            expand = c(0, 0),
            breaks = custom_breaks_years,
            limits = custom_limits,
            position = "bottom"
            ) +
        scale_y_reverse(
            expand = c(0, 0),
            breaks = c(52, 3),
            # labels = c("Última\nsemana\ndel año", "Primera\nsemana\ndel año"),
            limits = c(54, -5)
            ) +
        scale_fill_distiller(
            palette = color_palette, 
            direction = fill_direction,
            breaks = custom_breaks_fill,
            labels = custom_labels_fill
            ) + 
        labs(
            x = "Año",
            y = "Semana",
            title = "El invierno de Lima 2023 fue el más cálido\ndesde el Fenómeno El Niño 1997/98",
            subtitle = "Temperaturas semanales y «niños» de magnitud fuerte 1973-2023",
            caption = "Elaboración: Gonzalo Talavera Forlin - desarro.io\nFuente: ncei.noaa.gov - Estación del Aeropuerto Internacional Jorge Chávez.\nPromedios semanales calculados a partir de las temperaturas medias diarias",
            fill = "") + 
        guides(fill = guide_colourbar(barheight = unit(0.03, "inches"))) +
        theme_heatmap()
}

cat("make_base_weekly_heatmap():\n")
args(make_base_weekly_heatmap)
```

## 3. Usamos la función para crear heatmap de Lima - Callao del 82 en adelante:
```{r create_baselpot, fig.width=6, fig.height=6}
#| echo: false

df_week_heat <- filter(
    weekly_averages,
    year >= 1973,
    city == "Lima - Callao")
min_year <- min(df_week_heat$year)
max_year <- max(df_week_heat$year)

p_base <- make_base_weekly_heatmap(
    weekly_dataset = df_week_heat,
    medicion = tavg,
    custom_breaks_years = c(1975, 1980, 1985, 1990, 
                            1995, 2000, 2005, 2010, 2015, 2020),
    custom_limits = c(min(df_week_heat$year)-9, max(df_week_heat$year)+10),
    custom_breaks_fill = c(15, 20, 25),
    custom_labels_fill = c("15 °C", "20 °C ", "25 °C"),
    color_palette = "RdBu",
    fill_direction = -1
    )


# Print the plot
print(p_base)
```

## 4. Creamos una lista de anotaciones

```{r annotation_list}
annotations_list <- list(
    # Inicio de año
    annotate(
        "text", x = min_year-1, 
        y = 3.5, 
        label = paste("Semana 1\nde", min_year), 
        size = 2, color = "#F9F7F3", family = "Sanchez", vjust = 1, hjust = 1),
    geom_curve(
        aes(x = min_year-1, y = 1,
            xend = min_year-3, yend = 3),
        curvature = 0.3, color = "#F9F7F3", linewidth = 0.1,
        arrow = arrow(type = "closed", length = unit(0.03, "inches"))),
    # Última semana
    annotate(
        "text", x = max_year + 2, 
        y = max(
            df_week_heat[df_week_heat$year == max_year,]$week) + 3,
        label = paste(
            "Semana", 
            max(
                df_week_heat[df_week_heat$year == max_year,]$week), 
            "\nde", 
            max_year),
        size = 2, color = "#F9F7F3", family = "Sanchez", hjust = 0),
    geom_curve(
        aes(x = max_year + 0.2, 
            y = max(
                df_week_heat[df_week_heat$year == max_year,]$week) + 1,
            xend = max_year + 1.5, 
            yend = max(
                df_week_heat[df_week_heat$year == max_year,]$week) + 3),
        curvature = 0.3, color = "#F9F7F3", linewidth = 0.1,
        arrow = arrow(type = "closed", length = unit(0.03, "inches"))),
    # FEN 83
    annotate("text", x = 1982.5, y = -0.5, 
             label = "Niño\n82/83", 
             angle = 0, vjust = 0, 
             color = "#F9F7F3", size = 1.5, family = "Sanchez"),
    # FEN 98
    annotate("text", x = 1997.5, y = -0.5, 
             label = "Niño\n97/98", 
             angle = 0, vjust = 0, 
             color = "#F9F7F3", size = 1.5, family = "Sanchez"),
    # FEN 23
    annotate("text", x = 2024.5, y = -0.5, 
             label = "¿Niño\n23/24?", 
             angle = 0, vjust = 0, 
             color = "#F9F7F3", size = 1.5, family = "Sanchez")
)
```


## 5. Estilizamos:
```{r stylize_plot, fig.width=6, fig.height=6}
#| echo: false
p_base + annotations_list +     # Missing data
    annotate("text", x = 2013.5, y = mean(range(df_week$week)), 
             label = "2013 y 2014 sin datos disponibles", 
             size = 2, color = "#808080", family = "Sanchez", angle = 90, vjust = 0.5)

ggsave("outputs/heatmap_tw.png", width = 1200, height = 1200, units = "px") |> suppressMessages()
ggsave("outputs/heatmap_ig.png", width = 1080, height = 1080, units = "px") |> suppressMessages()
# ggsave("outputs/heatmap_in.png", width = 1080, height = 1080, units = "px") |> suppressMessages()
# ggsave("outputs/heatmap.svg", width = 1200, height = 1200, units = "px") |> suppressMessages()

```


# Heatmaps de ciudades de la costa - Escala fija

```{r national_heatmap_weekly, fig.width=8, fig.height=40}
#| echo: false

p_heatmaps_costa_fija <- make_base_weekly_heatmap(
    weekly_dataset = 
        filter(
            weekly_averages,
            year > 1981,
            city %in% c("Pisco",    "Tumbes",        "Piura",    "Chiclayo",
                        "Trujillo", "Lima - Callao", "Tacna")),
    medicion = tavg,
    custom_breaks_years = c(1990, 2000, 2010, 2020),
    custom_limits = c(1974, 2035),
    color_palette = "RdBu",
    fill_direction = -1
    ) + 
    facet_wrap(~ city, 
               ncol = 1#, scales = "free"
               ) +
    theme(
        plot.title = element_blank(),
        plot.subtitle = element_blank()
    ) + 
    annotations_list

p_heatmaps_costa_fija
```
# Heatmaps de ciudades de la costa - Escala libre

```{r national_heatmap_weekly_free, fig.width=8, fig.height=40}
#| echo: false
selected_stations <- filter(
    weekly_averages,
    year > 1981,
    city %in% c("Pisco",    "Tumbes",        "Piura",    "Chiclayo",
                "Trujillo", "Lima - Callao", "Tacna"))

unique_cities <- unique(selected_stations$city)

plots <- lapply(unique_cities, function(ciudad) {
    df_subset <- filter(selected_stations, city == ciudad)
    make_base_weekly_heatmap(df_subset, 
                             tavg,
                             fill_direction = -1,
                             custom_breaks_years = c(1990, 2000, 2010, 2020),
                             custom_limits = c(1974, 2035)) +
        labs(title = ciudad) +  # Set the title to the current city
    theme(
        plot.subtitle = element_blank(),
        plot.caption = element_blank(),
        legend.text = element_text(size = 10)
    ) + 
        annotations_list
    
})

plot_combined <- wrap_plots(plots, ncol = 1)  # Adjust ncol as needed

plot_combined
```


# Heat stripes
```{r heat_stripes}
make_heat_stripes <- function(yearly_dataset,
                              medicion,
                              color_palette = "RdBu") {
    ggplot(
        data = yearly_dataset,
        aes(
            x = factor(year),
            y = 1,
            fill = {{ medicion }})
        ) + 
    labs(title = first(yearly_dataset$city)) +
    geom_col() +
    scale_fill_distiller(
        palette = color_palette
    ) + 
    theme_void() +
        theme(
            plot.title = element_text()
        )
    }


relevant_data <- yearly_averages_corrected |> filter(
    year > 1981,
    city %in% c("Pisco",    "Tumbes",        "Piura",    "Chiclayo",
                "Trujillo", "Lima - Callao", "Tacna")
    )
list_of_city_dfs <- split(
    relevant_data,
    relevant_data$city)

lapply(list_of_city_dfs, make_heat_stripes, tavg)

```




```{r fig.width=6, fig.height=2}
#| echo: false
# temps <- lim_63_23_noaa |> 
#     select(date, tmax, tavg, tmin) |> 
#     filter(date>"1981-12-31") %>%
#     mutate(week = week(date), year = year(date)) %>%
#     group_by(year) %>%
#     summarize(tavg_year = mean(tavg, na.rm = TRUE),
#             tmax_year = mean(tmax, na.rm = TRUE),
#             tmin_year = mean(tmin, na.rm = TRUE)) |> 
#     ungroup() 
# 
# ggplot(temps, aes(x = year)) + 
#     geom_line(aes(y = tmax_year), color = "red") +
#     geom_line(aes(y = tavg_year), color = "white") +
#     geom_line(aes(y = tmin_year), color = "blue") +
#     scale_x_continuous(
#         expand = c(0, 0),
#         limits = c(1974, 2035),
#         position = "bottom"
#     ) +
#     theme_void() +  # Use theme_void() as the base theme
#     theme(
#         text = element_text(
#             colour = "#F9F7F3",
#             family = "Sanchez"),
#         plot.background = element_rect(
#             fill = "#2D2D2D", color = NA),  # #2D2D2D plot background
#         panel.background = element_rect(
#             fill = "#2D2D2D", color = NA),  # #2D2D2D panel background
#         axis.line = element_blank(),
#         axis.text = element_text(size = 6), # Remove axis lines
#         plot.caption = element_text(
#             margin = margin(t = 20, unit = "pt"),
#             hjust = 0, vjust = 1, size = 5, 
#             color = "#F9F7F3", family = "Sanchez"),
#         plot.title = element_text(
#             margin = margin(b = 3, unit = "pt")),
#         plot.title.position = "plot", 
#         plot.subtitle = element_text(
#             margin = margin(b = 10, unit = "pt"),
#             size = 10),
#         # axis.text.y = element_blank(),
#         axis.text.x = element_text(
#             size = 7
#         ),
#         plot.margin = margin(
#             t = 10, r = 10, b = 10, l = 10, unit = "pt"), 
#         legend.title = element_text(size = 6),
#         legend.text = element_text(size = 6),
#         legend.position = "none",
#         legend.direction = "horizontal"#,
#         # legend.spacing.y = unit(15, "pt"),
#         )

```

# smooth

```{r}
```



# Lines Plot 
```{r fig.width=6, fig.height=8}
#| echo: false
# Normalize the tyear values
# min_tyear <- min(df_week$tyear)
# max_tyear <- max(df_week$tyear)
# range_tyear <- max_tyear - min_tyear
# 
# df_week <- df_week %>%
#   mutate(normalized_tyear = (tyear - min_tyear) / range_tyear)
# 
# # Calculate the actual average of tyear
# actual_avg_tyear <- mean(df_week$tyear)
# 
# # Calculate the normalized value for the actual average
# normalized_avg_tyear <- (actual_avg_tyear - min_tyear) / range_tyear
# 
# # Generate a continuous color palette function with white set at the normalized average
# color_function <- colorRamp(c("blue", "white", "red"), space = "rgb")
# 
# # Apply the color function to normalized tyear values to get colors
# df_week_colored <- df_week %>%
#   mutate(color = rgb(color_function((normalized_tyear - normalized_avg_tyear) / (1 - normalized_avg_tyear) * 0.5 + 0.5), maxColorValue = 255))
# 
# # Plot with the new color mapping
# plot_ly(
#     df_week_colored,
#     x = ~week,
#     y = ~tavg_week,
#     name = ~year,
#     type = 'scatter',
#     mode = 'lines',
#     line = list(
#         color = ~color,
#         shape = "spline"  # Add this to smooth the lines
#     )
# ) %>%
# layout(
#     title = "Temperature by Week and Year",
#     xaxis = list(title = "Week"),
#     yaxis = list(title = "Average Temperature"),
#     paper_bgcolor = "#2D2D2D",
#     plot_bgcolor = "#2D2D2D"
# )

```


# Desviación del promedio
```{r fig.width=6, fig.height=2}


# 
# 
# temp_avg_63_23 <-  lim_63_23_noaa |> 
#     select(date, tavg) |> 
#     pull(tavg)  |> 
#     mean()
# 
# df_deviations <- lim_63_23_noaa |> 
#     select(date, tavg) |> 
#     group_by(year(date))  |> 
#     summarize(year = year(date), tyear = mean(tavg, na.rm = TRUE))  |> 
#     mutate(deviation = tyear - temp_avg_63_23)
# 
# ggplot(
#     df_deviations,
#     aes(x = year, y = deviation, fill = "red")) +
#     geom_col()


```


